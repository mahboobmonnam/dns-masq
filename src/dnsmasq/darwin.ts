import { access, mkdir, readFile, writeFile } from 'fs';
import { Listr } from 'listr2';
import { resolve } from 'path';
import { promisify } from 'util';

const writeFilePromise = promisify(writeFile);
const readFilePromise = promisify(readFile);
const mkdirPromise = promisify(mkdir);

const nameServerPath = '/etc/resolver/';
const resolverPath = resolve(nameServerPath, 'docker');
const dnsMasqContents = `# Generated by 4M's dnsmasq
nameserver 127.0.0.1
port 533
`;

const fileExists = (path) =>
  // eslint-disable-next-line no-promise-executor-return
  new Promise((resolved) => access(path, undefined, (err) => resolved(!err)));

export const darwinDnsMasq = async () => {
  await new Listr(
    [
      {
        title: 'Setting up DNS Masq for Darwin platform',
        skip: async () => {
          try {
            const fileContents = await readFilePromise(resolverPath, 'utf8');
            if (fileContents === dnsMasqContents) return true;
            return false;
          } catch (err) {
            return false;
          }
        },
        task: async (ctx, task: any) =>
          task.newListr([
            {
              title: 'Creating name server configuration directory',
              skip: async () => {
                if (await fileExists(nameServerPath)) return true;
                return false;
              },
              task: async () => {
                try {
                  await mkdirPromise(nameServerPath);
                } catch (err: any) {
                  if (err.code === 'EACCES')
                    throw new Error(
                      'This task needs elevated permissions. Please run again using sudo. This only needs to be done once.',
                    );
                  throw err;
                }
              },
            },
            {
              title: 'Creating DNS configuration file',
              task: async () => {
                try {
                  await writeFilePromise(resolverPath, dnsMasqContents);
                } catch (err: any) {
                  // eslint-disable-next-line no-param-reassign
                  task.output = err;
                  if (err.code === 'EACCES')
                    throw new Error(
                      'This task needs elevated permissions. Please run again using sudo. This only needs to be done once.',
                    );
                  throw err;
                }
              },
            },
          ]),
      },
    ],
    {
      concurrent: false,
      rendererOptions: {
        showSubtasks: true,
        collapse: false,
      },
    },
  ).run();
};
